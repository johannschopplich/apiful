// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`OpenAPI to TypeScript > generates OpenAPI types 1`] = `
"/* eslint-disable */
/* prettier-ignore */


declare module 'apiful/schema' {
  import { paths as TestEchoPaths, operations as TestEchoOperations } from 'apiful/__testEcho__'

  type NonNeverKeys<T> = {
    [K in keyof T]: [T[K]] extends [never]
      ? never
      : [undefined] extends [T[K]]
        ? [never] extends [Exclude<T[K], undefined>] ? never : K
        : K;
  }[keyof T];
  type NonNeverKeysWithoutParams<T> = Exclude<NonNeverKeys<T>, 'parameters'>
  type ParseInt<S extends string> = S extends \`\${infer N extends number}\` ? N : never
  
  // Generic HttpMethodsForPath type that works with any path object
  type HttpMethodsForPath<T, P extends keyof T> = NonNeverKeysWithoutParams<T[P]>

  interface OpenAPISchemaRepository {
    testEcho: TestEchoPaths
  }

  export type TestEchoResponse<
    T extends keyof TestEchoOperations,
    R extends keyof TestEchoOperations[T]['responses'] = 200 extends keyof TestEchoOperations[T]['responses'] ? 200 : never
  > = TestEchoOperations[T]['responses'][R] extends { content: { 'application/json': infer U } } ? U : never
  export type TestEchoRequestBody<
    T extends keyof TestEchoOperations
  > = TestEchoOperations[T]['requestBody'] extends { content: { 'application/json': infer U } } ? U : never
  export type TestEchoRequestQuery<
    T extends keyof TestEchoOperations
  > = TestEchoOperations[T]['parameters'] extends { query?: infer U } ? U : never
  
  // Helper type to get the operation from a path entry
  export type GetOperation<T, M extends string> =
    M extends 'get' ? T extends { get: infer Op } ? Op : never :
    M extends 'post' ? T extends { post: infer Op } ? Op : never :
    M extends 'put' ? T extends { put: infer Op } ? Op : never :
    M extends 'delete' ? T extends { delete: infer Op } ? Op : never :
    M extends 'patch' ? T extends { patch: infer Op } ? Op : never :
    never
  
  // Direct type that allows accessing path parameters by specifying the HTTP method
  export type PathParamsFromTestEcho<
    P extends keyof TestEchoPaths,
    M extends HttpMethodsForPath<TestEchoPaths, P> = HttpMethodsForPath<TestEchoPaths, P> extends string ? HttpMethodsForPath<TestEchoPaths, P> : never
  > = GetOperation<TestEchoPaths[P], M> extends infer Op
    ? Op extends { parameters?: any }
      ? NonNullable<Op['parameters']>['path'] extends infer Params
        ? Params extends object
          ? Params
          : Record<string, never>
        : Record<string, never>
      : Record<string, never>
    : Record<string, never>
  
  // Direct type that allows accessing request body by specifying the HTTP method
  export type RequestBodyFromTestEcho<
    P extends keyof TestEchoPaths,
    M extends HttpMethodsForPath<TestEchoPaths, P> = HttpMethodsForPath<TestEchoPaths, P> extends string ? HttpMethodsForPath<TestEchoPaths, P> : never
  > = GetOperation<TestEchoPaths[P], M> extends infer Op
    ? Op extends { requestBody?: any }
      ? NonNullable<Op['requestBody']>['content']['application/json'] extends infer Body
        ? Body extends object
          ? Body
          : Record<string, never>
        : Record<string, never>
      : Record<string, never>
    : Record<string, never>
  
  // Direct type that allows accessing query parameters by specifying the HTTP method
  export type QueryParamsFromTestEcho<
    P extends keyof TestEchoPaths,
    M extends HttpMethodsForPath<TestEchoPaths, P> = HttpMethodsForPath<TestEchoPaths, P> extends string ? HttpMethodsForPath<TestEchoPaths, P> : never
  > = GetOperation<TestEchoPaths[P], M> extends infer Op
    ? Op extends { parameters?: any }
      ? NonNullable<Op['parameters']>['query'] extends infer Params
        ? Params extends object
          ? Params
          : Record<string, never>
        : Record<string, never>
      : Record<string, never>
    : Record<string, never>
  
  // Direct type that allows accessing response body by specifying the HTTP method
  export type ResponseFromTestEcho<
    P extends keyof TestEchoPaths,
    M extends HttpMethodsForPath<TestEchoPaths, P> = HttpMethodsForPath<TestEchoPaths, P> extends string ? HttpMethodsForPath<TestEchoPaths, P> : never,
    C extends \`\${keyof NonNullable<GetOperation<TestEchoPaths[P], M>>['responses']}\` = '200'
  > = GetOperation<TestEchoPaths[P], M> extends infer Op
    ? Op extends { responses?: any }
      ? ParseInt<C> extends keyof Op['responses']
        ? Op['responses'][ParseInt<C>] extends { content: { 'application/json': infer Body } }
          ? Body
          : Record<string, never>
        : Record<string, never>
      : Record<string, never>
    : Record<string, never>
}

declare module 'apiful/__testEcho__' {
  export type paths = Record<string, never>
  export type webhooks = Record<string, never>
  export interface components {
    schemas: never
    responses: never
    parameters: never
    requestBodies: never
    headers: never
    pathItems: never
  }
  export type $defs = Record<string, never>
  export type operations = Record<string, never>
}
"
`;
