// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`OpenAPI to TypeScript > generates OpenAPI types 1`] = `
"/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck

declare module 'apiful/schema' {
  import { paths as TestEchoPaths, operations as TestEchoOperations } from 'apiful/__testEcho__'

  interface OpenAPISchemaRepository {
    testEcho: TestEchoPaths
  }

  export type TestEchoResponse<
    T extends keyof TestEchoOperations,
    R extends keyof TestEchoOperations[T]['responses'] = 200 extends keyof TestEchoOperations[T]['responses'] ? 200 : never
  > = TestEchoOperations[T]['responses'][R] extends { content: { 'application/json': infer U } } ? U : never
  export type TestEchoRequestBody<
    T extends keyof TestEchoOperations
  > = TestEchoOperations[T]['requestBody'] extends { content: { 'application/json': infer U } } ? U : never
  export type TestEchoRequestQuery<
    T extends keyof TestEchoOperations
  > = TestEchoOperations[T]['parameters'] extends { query?: infer U } ? U : never
}

declare module 'apiful/__testEcho__' {
  export interface paths {
    "/echo/static/constant": {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** Return a constant static response */
      get: operations["getConstantResponse"];
      put?: never;
      post?: never;
      delete?: never;
      options?: never;
      head?: never;
      patch?: never;
      trace?: never;
    };
    "/echo/request": {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      get?: never;
      put?: never;
      /** Echo back the request details */
      post: operations["echoRequest"];
      delete?: never;
      options?: never;
      head?: never;
      patch?: never;
      trace?: never;
    };
    "/echo/query": {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** Echo back the query parameters */
      get: operations["echoQueryParams"];
      put?: never;
      post?: never;
      delete?: never;
      options?: never;
      head?: never;
      patch?: never;
      trace?: never;
    };
  }
  export type webhooks = Record<string, never>;
  export interface components {
    schemas: {
      StaticResponse: {
        /** @example foo */
        value: string;
      };
      /** @description Any JSON request body to be echoed back */
      EchoRequest: {
        [key: string]: unknown;
      };
      EchoResponse: {
        /** @example /echo/request */
        path: string;
        body?: {
          [key: string]: unknown;
        };
        headers?: {
          [key: string]: string;
        };
        /**
         * @example POST
         * @enum {string}
         */
        method: "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
      };
      /** @description Echo of provided query parameters */
      QueryResponse: {
        [key: string]: string;
      };
      Error: {
        /** @example 404 */
        statusCode: number;
        /** @example Not Found */
        statusMessage: string;
      };
    };
    responses: {
      /** @description Resource not found */
      NotFound: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Bad request */
      BadRequest: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
  }
  export type $defs = Record<string, never>;
  export interface operations {
    getConstantResponse: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A static response with constant value */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["StaticResponse"];
          };
        };
        404: components["responses"]["NotFound"];
      };
    };
    echoRequest: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["EchoRequest"];
        };
      };
      responses: {
        /** @description Echo of the request details */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["EchoResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
      };
    };
    echoQueryParams: {
      parameters: {
        query?: {
          /** @description A query parameter to be echoed back */
          value?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Echo of the query parameters */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["QueryResponse"];
          };
        };
      };
    };
  }
}
"
`;
