// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`OpenAPI types generation > generates TypeScript types from OpenAPI schema 1`] = `
"/* eslint-disable */
/* prettier-ignore */

declare module 'apiful/schema' {
  import { paths as TestEchoPaths, components as TestEchoComponents } from 'apiful/schema/testEcho'

  // Augment the schema repository interface with all service schemas
  interface OpenAPISchemaRepository {
    'testEcho': TestEchoPaths
  }

  // Type helpers for schema paths and methods
  type NonNeverKeys<T> = { [K in keyof T]: T[K] extends never ? never : K }[keyof T]
  type PathMethods<T, P extends keyof T> = Exclude<NonNeverKeys<T[P]>, 'parameters'>

  /**
   * OpenAPI endpoint type helper for the TestEcho API
   *
   * @example
   * // Get path parameters for retrieving a user by ID:
   * type UserParams = TestEcho<'/users/{id}', 'get'>['path']
   *
   * // Get query parameters for listing users:
   * type UsersQuery = TestEcho<'/users', 'get'>['query']
   *
   * // Get request body type for creating a user:
   * type CreateUserBody = TestEcho<'/users', 'post'>['request']
   *
   * // Get success response for retrieving a user:
   * type UserResponse = TestEcho<'/users/{id}', 'get'>['response']
   *
   * // Get a specific status code response:
   * type UserNotFoundResponse = TestEcho<'/users/{id}', 'get'>['responses'][404]
   *
   * // Get complete endpoint type definition:
   * type UserEndpoint = TestEcho<'/users/{id}', 'get'>
   */
  export type TestEcho<
    Path extends keyof TestEchoPaths,
    Method extends PathMethods<TestEchoPaths, Path> = PathMethods<TestEchoPaths, Path> extends string ? PathMethods<TestEchoPaths, Path> : never
  > = {
    /** Path parameters for this endpoint */
    path: TestEchoPaths[Path][Method] extends { parameters?: { path?: infer P } } ? P : Record<string, never>
  
    /** Query parameters for this endpoint */
    query: TestEchoPaths[Path][Method] extends { parameters?: { query?: infer Q } } ? Q : Record<string, never>
  
    /** Request body for this endpoint */
    request: TestEchoPaths[Path][Method] extends { requestBody?: { content: { 'application/json': infer R } } } ? R : Record<string, never>
  
    /** Success response for this endpoint (defaults to 200 status code) */
    response: TestEchoPaths[Path][Method] extends { responses: infer R }
      ? 200 extends keyof R
        ? R[200] extends { content: { 'application/json': infer S } } ? S : Record<string, never>
        : Record<string, never>
      : Record<string, never>
  
    /** All possible responses for this endpoint by status code */
    responses: TestEchoPaths[Path][Method] extends { responses: infer T }
      ? {
          [Status in keyof T]:
            T[Status] extends { content: { 'application/json': infer R } }
              ? R
              : Record<string, never>
        }
      : Record<string, never>
  
    /** Full path with typed parameters for this endpoint (useful for route builders) */
    fullPath: Path
  
    /** HTTP method for this endpoint */
    method: Method
  
    /**
     * Full operation object for this endpoint
     *
     * @remarks
     * Useful for accessing additional metadata, such as tags or security requirements.
     */
    operation: TestEchoPaths[Path][Method]
  }
  
  /**
   * Type helper to list all available paths of the TestEcho API
   *
   * @example
   * type AvailablePaths = TestEchoApiPaths // Returns literal union of all available paths
   */
  export type TestEchoApiPaths = keyof TestEchoPaths
  
  /**
   * Type helper to get available methods for a specific path of the TestEcho API
   *
   * @example
   * type UserMethods = TestEchoApiMethods<'/users/{id}'> // Returns 'get' | 'put' | 'delete' etc.
   */
  export type TestEchoApiMethods<P extends keyof TestEchoPaths> = PathMethods<TestEchoPaths, P>
  
  /**
   * Type helper to extract schema models from the TestEcho API
   *
   * @example
   * type Pet = TestEchoModel<'Pet'> // Get the Pet schema model
   * type User = TestEchoModel<'User'> // Get the User schema model
   */
  export type TestEchoModel<T extends keyof TestEchoComponents['schemas']> = TestEchoComponents['schemas'][T]
}

declare module 'apiful/schema/testEcho' {
  export interface paths {
    "/echo/static/constant": {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /**
       * Get constant static response
       * @description Returns a constant static response for testing GET requests
       */
      get: operations["getStaticConstant"];
      put?: never;
      post?: never;
      delete?: never;
      options?: never;
      head?: never;
      patch?: never;
      trace?: never;
    };
    "/echo/request": {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      get?: never;
      /**
       * Echo PUT request details
       * @description Echoes back the details of a PUT request including headers, body, and metadata
       */
      put: operations["echoPutRequest"];
      /**
       * Echo POST request details
       * @description Echoes back the details of a POST request including headers, body, and metadata
       */
      post: operations["echoPostRequest"];
      /**
       * Echo DELETE request details
       * @description Echoes back the details of a DELETE request including headers and metadata
       */
      delete: operations["echoDeleteRequest"];
      options?: never;
      head?: never;
      /**
       * Echo PATCH request details
       * @description Echoes back the details of a PATCH request including headers, body, and metadata
       */
      patch: operations["echoPatchRequest"];
      trace?: never;
    };
    "/echo/query": {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /**
       * Echo query parameters
       * @description Returns the provided query parameters for testing query parameter handling
       */
      get: operations["echoQueryParameters"];
      put?: never;
      post?: never;
      delete?: never;
      options?: never;
      head?: never;
      patch?: never;
      trace?: never;
    };
  }
  export type webhooks = Record<string, never>;
  export interface components {
    schemas: {
      /** @description Static response with a constant value */
      StaticResponse: {
        /**
         * @description The constant static value returned by the endpoint
         * @example foo
         */
        value: string;
      };
      /**
       * @description Flexible request body that accepts any JSON structure for echo testing
       * @example {
       *       "foo": "bar",
       *       "number": 42,
       *       "nested": {
       *         "key": "value"
       *       }
       *     }
       */
      EchoRequest: {
        [key: string]: unknown;
      };
      /** @description Echo response containing request details and metadata */
      EchoResponse: {
        /**
         * @description The request path that was called
         * @example /echo/request
         */
        path: string;
        /** @description The request body that was sent (if any) */
        body?: {
          [key: string]: unknown;
        } | null;
        /**
         * @description The request headers that were sent
         * @example {
         *       "content-type": "application/json",
         *       "x-foo": "bar"
         *     }
         */
        headers?: {
          [key: string]: string;
        };
        /**
         * @description The HTTP method that was used
         * @example POST
         * @enum {string}
         */
        method: "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
      };
      /**
       * @description Echo response containing the query parameters that were provided
       * @example {
       *       "value": "test-value",
       *       "number": "42",
       *       "boolean": "true"
       *     }
       */
      QueryResponse: {
        [key: string]: string;
      };
      /** @description Standard error response format */
      Error: {
        /**
         * @description HTTP status code
         * @example 404
         */
        statusCode: number;
        /**
         * @description Human-readable error message
         * @example Not Found
         */
        statusMessage: string;
        /**
         * @description Additional error details (optional)
         * @example The requested resource could not be found
         */
        details?: string;
      };
    };
    responses: {
      /** @description The requested resource was not found */
      NotFound: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description The request was malformed or invalid */
      BadRequest: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
  }
  export type $defs = Record<string, never>;
  export interface operations {
    getStaticConstant: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful static response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["StaticResponse"];
          };
        };
        404: components["responses"]["NotFound"];
      };
    };
    echoPutRequest: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Request data to be echoed back */
      requestBody: {
        content: {
          "application/json": components["schemas"]["EchoRequest"];
        };
      };
      responses: {
        /** @description Successful echo of PUT request details */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["EchoResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
      };
    };
    echoPostRequest: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Request data to be echoed back */
      requestBody: {
        content: {
          "application/json": components["schemas"]["EchoRequest"];
        };
      };
      responses: {
        /** @description Successful echo of request details */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["EchoResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
      };
    };
    echoDeleteRequest: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful echo of DELETE request details */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["EchoResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
      };
    };
    echoPatchRequest: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Request data to be echoed back */
      requestBody: {
        content: {
          "application/json": components["schemas"]["EchoRequest"];
        };
      };
      responses: {
        /** @description Successful echo of PATCH request details */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["EchoResponse"];
          };
        };
        400: components["responses"]["BadRequest"];
      };
    };
    echoQueryParameters: {
      parameters: {
        query?: {
          /** @description A query parameter value to be echoed back */
          value?: string;
          /** @description A numeric query parameter to be echoed back */
          number?: number;
          /** @description A boolean query parameter to be echoed back */
          boolean?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful echo of query parameters */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["QueryResponse"];
          };
        };
      };
    };
  }
}

// Legacy module path for backward compatibility
// Please import from \`apiful/schema/testEcho\` instead
declare module 'apiful/__testEcho__' {
  export type * from 'apiful/schema/testEcho'
}
"
`;
